defaults:
  - _self_
  - optional tp_overlap@model.ub_tp_comm_overlap_cfg: ub_cfg_h100_h8192_tp4_mbs1_seqlen8192

hydra:
  searchpath:
    - file:///opt/NeMo/examples/nlp/language_modeling/conf

run:
  name: llama3_1_70b
  results_dir: ${experiment_path}/${.name}
  time_limit: "05:59:59" # NOTE(tj.solergibert) Todi time limit

trainer:
  num_nodes: 8
  devices: 4
  accelerator: gpu
  precision: bf16
  logger: False # Logger provided by exp_manager
  enable_checkpointing: False
  use_distributed_sampler: False
  max_epochs: null
  max_steps: 3000 # Consumed_samples = global_step * global_batch_size
  max_time: "99:23:59:59" # NOTE(tj.solergibert) The training will automatically stop after days:hours:minutes:seconds time
  log_every_n_steps: 10
  val_check_interval: 200 # NOTE(tj.solergibert) RUN NO VALIDATION
  limit_val_batches: 0 # NOTE(tj.solergibert) RUN NO VALIDATION
  limit_test_batches: 0 # NOTE(tj.solergibert) RUN NO TEST
  accumulate_grad_batches: 1
  gradient_clip_val: 1.0

exp_manager:
  explicit_log_dir: ${training.run.results_dir}/results # TODO(tj.solergibert) Delete this results folder!
  exp_dir: null
  name: megatron_llama_3_1_70b
  create_wandb_logger: False
  wandb_logger_kwargs:
    project: nemo_llama_3_1_70b_pretrain
    name: ${training.run.name}
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_preemption_callback: False
  create_checkpoint_callback: True
  checkpoint_callback_params:
    async_save: True
    every_n_train_steps: 1000
    always_save_nemo: False # Saves nemo file during validation, not implemented for model parallel
    save_nemo_on_train_end: False # Not recommended when training large models on clusters with short time limits
    filename: 'megatron_llama_3_1_70b-{step}-{consumed_samples}'
    model_parallel_size: ${multiply:${training.model.tensor_model_parallel_size}, ${training.model.pipeline_model_parallel_size}}
    every_n_epochs: null
    monitor: consumed_samples
    save_top_k: -1 # NOTE(tj.solergibert) -1 to store ALL checkpoints
  log_step_timing: True
  step_timing_kwargs:
    sync_cuda: True
    buffer_size: 5
  seconds_to_sleep: 60
  # create_straggler_detection_callback: False
  # straggler_detection_callback_params:
  #     report_time_interval: 300      # Interval [seconds] of the straggler check
  #     calc_relative_gpu_perf: True   # Calculate relative GPU performance
  #     calc_individual_gpu_perf: True # Calculate individual GPU performance
  #     num_gpu_perf_scores_to_log: 5       # Log 5 best and 5 worst GPU performance scores, even if no stragglers are detected
  #     gpu_relative_perf_threshold: 0.7    # Threshold for relative GPU performance scores
  #     gpu_individual_perf_threshold: 0.7  # Threshold for individual GPU performance scores
  #     stop_if_detected: True              # Terminate the workload if stragglers are detected
  # create_fault_tolerance_callback: False # Will be available in Sep-Oct
  # fault_tolerance:
  #     initial_rank_heartbeat_timeout: 600  # wait for 10 minutes for the initial heartbeat
  #     rank_heartbeat_timeout: 300  # wait for 5 minutes for subsequent heartbeats
  #     calculate_timeouts: True # estimate more accurate timeouts based on observed intervals

model:
  # The following two settings are used for continual training:
  restore_from_path: null # Set this to a .nemo file path to restore only the model weights.
  restore_from_ckpt: null # Set this to a training ckpt path to restore both model weights and optimizer states
  # NOTE(tj.solergibert): https://github.com/NVIDIA/NeMo/blob/23c7de1b6e5858547541f26d2baa20d5371ea141/examples/nlp/language_modeling/megatron_gpt_pretraining.py#L62
  # Otherwise the PTL Trainer will resume from the -latest checkpoint. 

  # use GPTModel from megatron.core
  mcore_gpt: True
  
  # specify micro_batch_size, global_batch_size, and model parallelism
  # gradient accumulation will be done automatically based on data_parallel_size
  micro_batch_size: 1 # limited by GPU memory
  global_batch_size: 2048 # will use more micro batches to reach global batch size
  tensor_model_parallel_size: 4
  pipeline_model_parallel_size: 8
  virtual_pipeline_model_parallel_size: 5 # NOTE(tj.solergibert) Num layers = 80, (80 / pipeline_model_parallel_size) / 2
  context_parallel_size: 1 # TODO(tj.solergibert) Check CP

  # Sequence Parallelism
  # Makes tensor parallelism more memory efficient for LLMs (20B+) by parallelizing layer norms and dropout sequentially
  # See Reducing Activation Recomputation in Large Transformer Models: https://arxiv.org/abs/2205.05198 for more details.
  sequence_parallel: True
  
  # Model architecture
  encoder_seq_length: 8192
  max_position_embeddings: ${training.model.encoder_seq_length}
  num_layers: 80
  hidden_size: 8192
  ffn_hidden_size: 28672
  num_attention_heads: 64
  num_query_groups: 8
  init_method_std: 0.008944
  use_scaled_init_method: True
  hidden_dropout: 0.0
  attention_dropout: 0.0
  ffn_dropout: 0.0
  kv_channels: null
  apply_query_key_layer_scaling: True
  normalization: rmsnorm
  layernorm_epsilon: 1.0e-05
  do_layer_norm_weight_decay: False
  make_vocab_size_divisible_by: 128
  pre_process: True
  post_process: True
  persist_layer_norm: True
  bias: False
  activation: fast-swiglu
  headscale: False
  transformer_block_type: pre_ln
  openai_gelu: False
  normalize_attention_scores: True
  position_embedding_type: rope
  rotary_base: 500000.0
  rotary_percentage: 1.0
  attention_type: multihead
  share_embeddings_and_output_weights: False
  scale_positional_embedding: True
  tokenizer:
    library: huggingface
    type: /store/swissai/a06/models/Meta-Llama-3.1-8B
    use_fast: True

  # Mixed precision
  native_amp_init_scale: 4294967296
  native_amp_growth_interval: 1000
  hysteresis: 2
  fp32_residual_connection: False
  fp16_lm_cross_entropy: False
  
  # Megatron O2-style half-precision
  megatron_amp_O2: True # Enable O2-level automatic mixed precision using main parameters
  grad_allreduce_chunk_size_mb: 125

  # Optimizations
  defer_embedding_wgrad_compute: True
  wgrad_deferral_limit: 22
  overlap_p2p_comm: True
  batch_p2p_comm: False
  
  # Fusion
  apply_rope_fusion: True
  grad_div_ar_fusion: True
  gradient_accumulation_fusion: True # NOTE(tj.solergibert) https://github.com/NVIDIA/Megatron-LM/blob/01945b98d1ea3a2acb5e8301e181a328104f4856/megatron/core/tensor_parallel/layers.py#L41C5-L41C42 & https://github.com/NVIDIA/Megatron-LM/blob/01945b98d1ea3a2acb5e8301e181a328104f4856/megatron/core/tensor_parallel/layers.py#L575
  cross_entropy_loss_fusion: True
  bias_activation_fusion: True
  bias_dropout_add_fusion: True
  masked_softmax_fusion: True

  # Miscellaneous
  seed: 1234
  use_cpu_initialization: False
  onnx_safe: False
  apex_transformer_log_level: 30
  gradient_as_bucket_view: True
  sync_batch_comm: False
  deterministic_mode: False
  
  # Distributed checkpoint setup
  dist_ckpt_format: 'torch_dist' # Set to 'torch_dist' to use PyTorch distributed checkpoint format.
  dist_ckpt_load_on_device: True # whether to load checkpoint weights directly on GPU or to CPU
  dist_ckpt_parallel_save: True
  dist_ckpt_assume_constant_structure: True # set to True only if the state dict structure doesn't change within a single job. Allows caching some computation across checkpoint saves.

  # Transformer Engine
  transformer_engine: True
  fp8: False # enables fp8 in TransformerLayer forward
  fp8_e4m3: False # sets fp8_format = recipe.Format.E4M3
  fp8_hybrid: False # sets fp8_format = recipe.Format.HYBRID
  fp8_margin: 0 # scaling margin
  fp8_interval: 1 # scaling update interval
  fp8_amax_history_len: 1024 # Number of steps for which amax history is recorded per tensor
  fp8_amax_compute_algo: max # 'most_recent' or 'max'. Algorithm for computing amax from history
  ub_tp_comm_overlap: False
  use_flash_attention: True # Use flash attention in self-attention module, this config does nothing when transformer_engine=True

  # Interval of the host memory garbage collection. When it is zero, collectiion relies on the automatic garbage collector.
  # If an interger value larger than zero is set, collection is done manually by the batch step interval of `gc_interval`.
  gc_interval: 0

  # Profilers
  nsys_profile: # NOTE(tj.solergibert) nsys profile -s none -o <profile filepath> -t cuda,nvtx --force-overwrite true --capture-range=cudaProfilerApi --capture-range-end=stop python ./examples/...
    enabled: False
    trace: [nvtx,cuda]
    start_step: 20  # Global batch to start profiling
    end_step: 20 # Global batch to end profiling
    ranks: [0] # Global rank IDs to profile
    gen_shape: True # Generate model and kernel details including input shapes
  
  memory_profile:
    enabled: False # NOTE(tj.solergibert) Not working on Todi (RuntimeError: record_context_cpp is not support on non-linux non-x86_64 platforms)
    start_step: 10  # Global batch to start profiling
    end_step: 10 # Global batch to end profiling
    rank: 0 # Global rank ID to profile
    output_path: ${training.exp_manager.explicit_log_dir} # Path to store the profile output file

  optim:
    name: mcore_distributed_optim # mcore_distributed_optim | distributed_fused_adam |fused_adam | megatron_fused_adam
    lr: 0.00015
    weight_decay: 0.1
    betas:
    - 0.9
    - 0.95
    grad_sync_dtype: bf16
    bucket_cap_mb: 125
    overlap_grad_sync: True
    overlap_param_sync: True
    contiguous_grad_buffer: True
    contiguous_param_buffer: True
    sched:
      name: CosineAnnealing
      warmup_steps: 2000
      constant_steps: 11873
      min_lr: 1.0e-05

  data:
    data_impl: mmap
    splits_string: 900,50,50
    seq_length: ${training.model.encoder_seq_length}
    skip_warmup: True
    num_workers: 2
    num_dataset_builder_threads: 1 # NOTE(tj.solergibert) Increase it if we have MANY .bin files
    dataloader_type: single
    reset_position_ids: True
    reset_attention_mask: True
    eod_mask_loss: True
    index_mapping_dir: null # NOTE(tj.solergibert) Megatron's datasets `path_to_cache` dir
    # Path to data must be specified by the user.
    # Supports List, String and Dictionary
    # List : can override from the CLI: "model.data.data_prefix=[.5,/raid/data/pile/my-gpt3_00_text_document,.5,/raid/data/pile/my-gpt3_01_text_document]",
    # Or see example below:
    # data_prefix:
    #   - .5
    #   - /raid/data/pile/my-gpt3_00_text_document
    #   - .5
    #   - /raid/data/pile/my-gpt3_01_text_document
    # Dictionary: can override from CLI "model.data.data_prefix"={"train":[1.0, /path/to/data], "validation":/path/to/data, "test":/path/to/test}
    # Or see example below:
    # "model.data.data_prefix: {train:[1.0,/path/to/data], validation:[/path/to/data], test:[/path/to/test]}"
    data_prefix: ???

  ## Megatron timers
  enable_megatron_timers: True
  megatron_timer_kwargs:
    log_every_n_steps: 10
    log_mode: minmax
    barrier: False


  
